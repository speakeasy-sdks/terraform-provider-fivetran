// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NewConnectorRequestV1SyncFrequencyEnum - The connector sync frequency in minutes
type NewConnectorRequestV1SyncFrequencyEnum string

const (
	NewConnectorRequestV1SyncFrequencyEnumFive                           NewConnectorRequestV1SyncFrequencyEnum = "5"
	NewConnectorRequestV1SyncFrequencyEnumFifteen                        NewConnectorRequestV1SyncFrequencyEnum = "15"
	NewConnectorRequestV1SyncFrequencyEnumThirty                         NewConnectorRequestV1SyncFrequencyEnum = "30"
	NewConnectorRequestV1SyncFrequencyEnumSixty                          NewConnectorRequestV1SyncFrequencyEnum = "60"
	NewConnectorRequestV1SyncFrequencyEnumOneHundredAndTwenty            NewConnectorRequestV1SyncFrequencyEnum = "120"
	NewConnectorRequestV1SyncFrequencyEnumOneHundredAndEighty            NewConnectorRequestV1SyncFrequencyEnum = "180"
	NewConnectorRequestV1SyncFrequencyEnumThreeHundredAndSixty           NewConnectorRequestV1SyncFrequencyEnum = "360"
	NewConnectorRequestV1SyncFrequencyEnumFourHundredAndEighty           NewConnectorRequestV1SyncFrequencyEnum = "480"
	NewConnectorRequestV1SyncFrequencyEnumSevenHundredAndTwenty          NewConnectorRequestV1SyncFrequencyEnum = "720"
	NewConnectorRequestV1SyncFrequencyEnumOneThousandFourHundredAndForty NewConnectorRequestV1SyncFrequencyEnum = "1440"
)

func (e *NewConnectorRequestV1SyncFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "5":
		fallthrough
	case "15":
		fallthrough
	case "30":
		fallthrough
	case "60":
		fallthrough
	case "120":
		fallthrough
	case "180":
		fallthrough
	case "360":
		fallthrough
	case "480":
		fallthrough
	case "720":
		fallthrough
	case "1440":
		*e = NewConnectorRequestV1SyncFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NewConnectorRequestV1SyncFrequencyEnum: %s", s)
	}
}

type NewConnectorRequestV1 struct {
	ConnectCardConfig *ConnectCardConfig `json:"connect_card_config,omitempty"`
	// The optional parameter that defines the sync start time when the sync frequency is already set or being set by the current request to 1440. It can be specified in one hour increments starting from 00:00 to 23:00. If not specified, we will use [the baseline sync start time](https://fivetran.com/docs/getting-started/syncoverview#syncfrequencyandscheduling). This parameter has no effect on the [0 to 60 minutes offset](https://fivetran.com/docs/getting-started/syncoverview#syncstarttimesandoffsets) used to determine the actual sync start time
	DailySyncTime *string `json:"daily_sync_time,omitempty"`
	// The unique identifier for the group within the Fivetran system
	GroupID *string `json:"group_id,omitempty"`
	// Specifies whether the connector should be paused after the free trial period has ended
	PauseAfterTrial *bool `json:"pause_after_trial,omitempty"`
	// Specifies whether the connector is paused
	Paused *bool `json:"paused,omitempty"`
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunSetupTests *bool   `json:"run_setup_tests,omitempty"`
	ScheduleType  *string `json:"schedule_type,omitempty"`
	// The connector type name within the Fivetran system
	Service *string `json:"service,omitempty"`
	// The connector sync frequency in minutes
	SyncFrequency *NewConnectorRequestV1SyncFrequencyEnum `json:"sync_frequency,omitempty"`
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates *bool `json:"trust_certificates,omitempty"`
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints *bool `json:"trust_fingerprints,omitempty"`
}

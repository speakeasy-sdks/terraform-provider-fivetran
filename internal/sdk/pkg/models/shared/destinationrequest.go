// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DestinationRequestRegionEnum - Data processing location. This is where Fivetran will operate and run computation on data.
type DestinationRequestRegionEnum string

const (
	DestinationRequestRegionEnumGcpUsEast4                DestinationRequestRegionEnum = "GCP_US_EAST4"
	DestinationRequestRegionEnumGcpUsWest1                DestinationRequestRegionEnum = "GCP_US_WEST1"
	DestinationRequestRegionEnumGcpEuropeWest3            DestinationRequestRegionEnum = "GCP_EUROPE_WEST3"
	DestinationRequestRegionEnumGcpAustraliaSoutheast1    DestinationRequestRegionEnum = "GCP_AUSTRALIA_SOUTHEAST1"
	DestinationRequestRegionEnumGcpNorthamericaNortheast1 DestinationRequestRegionEnum = "GCP_NORTHAMERICA_NORTHEAST1"
	DestinationRequestRegionEnumGcpEuropeWest2            DestinationRequestRegionEnum = "GCP_EUROPE_WEST2"
	DestinationRequestRegionEnumGcpAsiaSoutheast1         DestinationRequestRegionEnum = "GCP_ASIA_SOUTHEAST1"
	DestinationRequestRegionEnumAwsUsEast1                DestinationRequestRegionEnum = "AWS_US_EAST_1"
	DestinationRequestRegionEnumAwsUsEast2                DestinationRequestRegionEnum = "AWS_US_EAST_2"
	DestinationRequestRegionEnumAwsUsWest2                DestinationRequestRegionEnum = "AWS_US_WEST_2"
	DestinationRequestRegionEnumAwsApSoutheast2           DestinationRequestRegionEnum = "AWS_AP_SOUTHEAST_2"
	DestinationRequestRegionEnumAwsEuCentral1             DestinationRequestRegionEnum = "AWS_EU_CENTRAL_1"
	DestinationRequestRegionEnumAwsEuWest1                DestinationRequestRegionEnum = "AWS_EU_WEST_1"
	DestinationRequestRegionEnumAwsEuWest2                DestinationRequestRegionEnum = " AWS_EU_WEST_2"
	DestinationRequestRegionEnumAzureEastus2              DestinationRequestRegionEnum = "AZURE_EASTUS2"
	DestinationRequestRegionEnumAzureAustraliaeast        DestinationRequestRegionEnum = "AZURE_AUSTRALIAEAST"
	DestinationRequestRegionEnumGcpAsiaSouth1             DestinationRequestRegionEnum = "GCP_ASIA_SOUTH1"
)

func (e *DestinationRequestRegionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GCP_US_EAST4":
		fallthrough
	case "GCP_US_WEST1":
		fallthrough
	case "GCP_EUROPE_WEST3":
		fallthrough
	case "GCP_AUSTRALIA_SOUTHEAST1":
		fallthrough
	case "GCP_NORTHAMERICA_NORTHEAST1":
		fallthrough
	case "GCP_EUROPE_WEST2":
		fallthrough
	case "GCP_ASIA_SOUTHEAST1":
		fallthrough
	case "AWS_US_EAST_1":
		fallthrough
	case "AWS_US_EAST_2":
		fallthrough
	case "AWS_US_WEST_2":
		fallthrough
	case "AWS_AP_SOUTHEAST_2":
		fallthrough
	case "AWS_EU_CENTRAL_1":
		fallthrough
	case "AWS_EU_WEST_1":
		fallthrough
	case " AWS_EU_WEST_2":
		fallthrough
	case "AZURE_EASTUS2":
		fallthrough
	case "AZURE_AUSTRALIAEAST":
		fallthrough
	case "GCP_ASIA_SOUTH1":
		*e = DestinationRequestRegionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRequestRegionEnum: %s", s)
	}
}

type DestinationRequest struct {
	// The unique identifier for the group within the Fivetran system.
	GroupID string `json:"group_id"`
	// Data processing location. This is where Fivetran will operate and run computation on data.
	Region *DestinationRequestRegionEnum `json:"region,omitempty"`
	// Specifies whether setup tests should be run automatically.
	RunSetupTests *bool `json:"run_setup_tests,omitempty"`
	// The name for the destination type within the Fivetran system.
	Service string `json:"service"`
	// Determines the time zone for the Fivetran sync schedule.
	TimeZoneOffset string `json:"time_zone_offset"`
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates *bool `json:"trust_certificates,omitempty"`
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints *bool `json:"trust_fingerprints,omitempty"`
}
